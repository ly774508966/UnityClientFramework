// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolDatas.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Data {

  /// <summary>Holder for reflection information generated from ProtocolDatas.proto</summary>
  public static partial class ProtocolDatasReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtocolDatas.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolDatasReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90b2NvbERhdGFzLnByb3RvEgREYXRhIpABCgxDbGllbnRDb25maWcS",
            "EgoKdmVyc2lvblRhZxgBIAEoCRILCgNpcHMYAiABKAkSDQoFcG9ydHMYAyAB",
            "KAkSEwoLcmVzb3VyY2VVcmwYBCABKAkSEgoKdmVyc2lvblVybBgFIAEoCRIR",
            "CglzaG93U3RhdGUYBiABKAgSFAoMc2VsZWN0U2VydmVyGAcgASgIIjUKEENs",
            "aWVudENvbmZpZ0xpc3QSIQoFZGF0YXMYASADKAsyEi5EYXRhLkNsaWVudENv",
            "bmZpZyIkCghMYW5ndWFnZRIKCgJpZBgBIAEoBRIMCgR0ZXh0GAIgASgJIi0K",
            "DExhbmd1YWdlTGlzdBIdCgVkYXRhcxgBIAMoCzIOLkRhdGEuTGFuZ3VhZ2Ui",
            "kwEKDFdpbmRvd0NvbmZpZxIPCgd3aW5OYW1lGAEgASgJEhIKCnByZWZhYk5h",
            "bWUYAiABKAkSEgoKY2FtZXJhTmFtZRgDIAEoCRIQCghpc1JlY29yZBgEIAEo",
            "CBIPCgdpc0hvdmVyGAUgASgIEhMKC2Nsb3NlRGVsZXRlGAYgASgIEhIKCm9w",
            "ZW5FZmZlY3QYByABKAgiNQoQV2luZG93Q29uZmlnTGlzdBIhCgVkYXRhcxgB",
            "IAMoCzISLkRhdGEuV2luZG93Q29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.ClientConfig), global::Data.ClientConfig.Parser, new[]{ "VersionTag", "Ips", "Ports", "ResourceUrl", "VersionUrl", "ShowState", "SelectServer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.ClientConfigList), global::Data.ClientConfigList.Parser, new[]{ "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.Language), global::Data.Language.Parser, new[]{ "Id", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.LanguageList), global::Data.LanguageList.Parser, new[]{ "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.WindowConfig), global::Data.WindowConfig.Parser, new[]{ "WinName", "PrefabName", "CameraName", "IsRecord", "IsHover", "CloseDelete", "OpenEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.WindowConfigList), global::Data.WindowConfigList.Parser, new[]{ "Datas" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientConfig : pb::IMessage<ClientConfig> {
    private static readonly pb::MessageParser<ClientConfig> _parser = new pb::MessageParser<ClientConfig>(() => new ClientConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig(ClientConfig other) : this() {
      versionTag_ = other.versionTag_;
      ips_ = other.ips_;
      ports_ = other.ports_;
      resourceUrl_ = other.resourceUrl_;
      versionUrl_ = other.versionUrl_;
      showState_ = other.showState_;
      selectServer_ = other.selectServer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig Clone() {
      return new ClientConfig(this);
    }

    /// <summary>Field number for the "versionTag" field.</summary>
    public const int VersionTagFieldNumber = 1;
    private string versionTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionTag {
      get { return versionTag_; }
      set {
        versionTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ips" field.</summary>
    public const int IpsFieldNumber = 2;
    private string ips_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ips {
      get { return ips_; }
      set {
        ips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 3;
    private string ports_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ports {
      get { return ports_; }
      set {
        ports_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resourceUrl" field.</summary>
    public const int ResourceUrlFieldNumber = 4;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionUrl" field.</summary>
    public const int VersionUrlFieldNumber = 5;
    private string versionUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionUrl {
      get { return versionUrl_; }
      set {
        versionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showState" field.</summary>
    public const int ShowStateFieldNumber = 6;
    private bool showState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowState {
      get { return showState_; }
      set {
        showState_ = value;
      }
    }

    /// <summary>Field number for the "selectServer" field.</summary>
    public const int SelectServerFieldNumber = 7;
    private bool selectServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SelectServer {
      get { return selectServer_; }
      set {
        selectServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionTag != other.VersionTag) return false;
      if (Ips != other.Ips) return false;
      if (Ports != other.Ports) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (VersionUrl != other.VersionUrl) return false;
      if (ShowState != other.ShowState) return false;
      if (SelectServer != other.SelectServer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VersionTag.Length != 0) hash ^= VersionTag.GetHashCode();
      if (Ips.Length != 0) hash ^= Ips.GetHashCode();
      if (Ports.Length != 0) hash ^= Ports.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (VersionUrl.Length != 0) hash ^= VersionUrl.GetHashCode();
      if (ShowState != false) hash ^= ShowState.GetHashCode();
      if (SelectServer != false) hash ^= SelectServer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VersionTag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VersionTag);
      }
      if (Ips.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ips);
      }
      if (Ports.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ports);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourceUrl);
      }
      if (VersionUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VersionUrl);
      }
      if (ShowState != false) {
        output.WriteRawTag(48);
        output.WriteBool(ShowState);
      }
      if (SelectServer != false) {
        output.WriteRawTag(56);
        output.WriteBool(SelectServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VersionTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionTag);
      }
      if (Ips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ips);
      }
      if (Ports.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ports);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (VersionUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionUrl);
      }
      if (ShowState != false) {
        size += 1 + 1;
      }
      if (SelectServer != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.VersionTag.Length != 0) {
        VersionTag = other.VersionTag;
      }
      if (other.Ips.Length != 0) {
        Ips = other.Ips;
      }
      if (other.Ports.Length != 0) {
        Ports = other.Ports;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.VersionUrl.Length != 0) {
        VersionUrl = other.VersionUrl;
      }
      if (other.ShowState != false) {
        ShowState = other.ShowState;
      }
      if (other.SelectServer != false) {
        SelectServer = other.SelectServer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VersionTag = input.ReadString();
            break;
          }
          case 18: {
            Ips = input.ReadString();
            break;
          }
          case 26: {
            Ports = input.ReadString();
            break;
          }
          case 34: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 42: {
            VersionUrl = input.ReadString();
            break;
          }
          case 48: {
            ShowState = input.ReadBool();
            break;
          }
          case 56: {
            SelectServer = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientConfigList : pb::IMessage<ClientConfigList> {
    private static readonly pb::MessageParser<ClientConfigList> _parser = new pb::MessageParser<ClientConfigList>(() => new ClientConfigList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfigList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfigList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfigList(ClientConfigList other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfigList Clone() {
      return new ClientConfigList(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Data.ClientConfig> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Data.ClientConfig.Parser);
    private readonly pbc::RepeatedField<global::Data.ClientConfig> datas_ = new pbc::RepeatedField<global::Data.ClientConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.ClientConfig> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfigList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfigList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfigList other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Language : pb::IMessage<Language> {
    private static readonly pb::MessageParser<Language> _parser = new pb::MessageParser<Language>(() => new Language());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Language> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language(Language other) : this() {
      id_ = other.id_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language Clone() {
      return new Language(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Language);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Language other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Language other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LanguageList : pb::IMessage<LanguageList> {
    private static readonly pb::MessageParser<LanguageList> _parser = new pb::MessageParser<LanguageList>(() => new LanguageList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanguageList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageList(LanguageList other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageList Clone() {
      return new LanguageList(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Data.Language> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Data.Language.Parser);
    private readonly pbc::RepeatedField<global::Data.Language> datas_ = new pbc::RepeatedField<global::Data.Language>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.Language> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanguageList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanguageList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanguageList other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowConfig : pb::IMessage<WindowConfig> {
    private static readonly pb::MessageParser<WindowConfig> _parser = new pb::MessageParser<WindowConfig>(() => new WindowConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfig(WindowConfig other) : this() {
      winName_ = other.winName_;
      prefabName_ = other.prefabName_;
      cameraName_ = other.cameraName_;
      isRecord_ = other.isRecord_;
      isHover_ = other.isHover_;
      closeDelete_ = other.closeDelete_;
      openEffect_ = other.openEffect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfig Clone() {
      return new WindowConfig(this);
    }

    /// <summary>Field number for the "winName" field.</summary>
    public const int WinNameFieldNumber = 1;
    private string winName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinName {
      get { return winName_; }
      set {
        winName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prefabName" field.</summary>
    public const int PrefabNameFieldNumber = 2;
    private string prefabName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabName {
      get { return prefabName_; }
      set {
        prefabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cameraName" field.</summary>
    public const int CameraNameFieldNumber = 3;
    private string cameraName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraName {
      get { return cameraName_; }
      set {
        cameraName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isRecord" field.</summary>
    public const int IsRecordFieldNumber = 4;
    private bool isRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecord {
      get { return isRecord_; }
      set {
        isRecord_ = value;
      }
    }

    /// <summary>Field number for the "isHover" field.</summary>
    public const int IsHoverFieldNumber = 5;
    private bool isHover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHover {
      get { return isHover_; }
      set {
        isHover_ = value;
      }
    }

    /// <summary>Field number for the "closeDelete" field.</summary>
    public const int CloseDeleteFieldNumber = 6;
    private bool closeDelete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CloseDelete {
      get { return closeDelete_; }
      set {
        closeDelete_ = value;
      }
    }

    /// <summary>Field number for the "openEffect" field.</summary>
    public const int OpenEffectFieldNumber = 7;
    private bool openEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenEffect {
      get { return openEffect_; }
      set {
        openEffect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinName != other.WinName) return false;
      if (PrefabName != other.PrefabName) return false;
      if (CameraName != other.CameraName) return false;
      if (IsRecord != other.IsRecord) return false;
      if (IsHover != other.IsHover) return false;
      if (CloseDelete != other.CloseDelete) return false;
      if (OpenEffect != other.OpenEffect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinName.Length != 0) hash ^= WinName.GetHashCode();
      if (PrefabName.Length != 0) hash ^= PrefabName.GetHashCode();
      if (CameraName.Length != 0) hash ^= CameraName.GetHashCode();
      if (IsRecord != false) hash ^= IsRecord.GetHashCode();
      if (IsHover != false) hash ^= IsHover.GetHashCode();
      if (CloseDelete != false) hash ^= CloseDelete.GetHashCode();
      if (OpenEffect != false) hash ^= OpenEffect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WinName);
      }
      if (PrefabName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PrefabName);
      }
      if (CameraName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CameraName);
      }
      if (IsRecord != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRecord);
      }
      if (IsHover != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsHover);
      }
      if (CloseDelete != false) {
        output.WriteRawTag(48);
        output.WriteBool(CloseDelete);
      }
      if (OpenEffect != false) {
        output.WriteRawTag(56);
        output.WriteBool(OpenEffect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinName);
      }
      if (PrefabName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabName);
      }
      if (CameraName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraName);
      }
      if (IsRecord != false) {
        size += 1 + 1;
      }
      if (IsHover != false) {
        size += 1 + 1;
      }
      if (CloseDelete != false) {
        size += 1 + 1;
      }
      if (OpenEffect != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowConfig other) {
      if (other == null) {
        return;
      }
      if (other.WinName.Length != 0) {
        WinName = other.WinName;
      }
      if (other.PrefabName.Length != 0) {
        PrefabName = other.PrefabName;
      }
      if (other.CameraName.Length != 0) {
        CameraName = other.CameraName;
      }
      if (other.IsRecord != false) {
        IsRecord = other.IsRecord;
      }
      if (other.IsHover != false) {
        IsHover = other.IsHover;
      }
      if (other.CloseDelete != false) {
        CloseDelete = other.CloseDelete;
      }
      if (other.OpenEffect != false) {
        OpenEffect = other.OpenEffect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WinName = input.ReadString();
            break;
          }
          case 18: {
            PrefabName = input.ReadString();
            break;
          }
          case 26: {
            CameraName = input.ReadString();
            break;
          }
          case 32: {
            IsRecord = input.ReadBool();
            break;
          }
          case 40: {
            IsHover = input.ReadBool();
            break;
          }
          case 48: {
            CloseDelete = input.ReadBool();
            break;
          }
          case 56: {
            OpenEffect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowConfigList : pb::IMessage<WindowConfigList> {
    private static readonly pb::MessageParser<WindowConfigList> _parser = new pb::MessageParser<WindowConfigList>(() => new WindowConfigList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowConfigList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfigList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfigList(WindowConfigList other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfigList Clone() {
      return new WindowConfigList(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Data.WindowConfig> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Data.WindowConfig.Parser);
    private readonly pbc::RepeatedField<global::Data.WindowConfig> datas_ = new pbc::RepeatedField<global::Data.WindowConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.WindowConfig> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowConfigList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowConfigList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowConfigList other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
